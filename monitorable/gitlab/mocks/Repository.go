// Code generated by mockery v1.0.0. DO NOT EDIT.

// If you want to rebuild this file, make mock-monitorable

package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/monitoror/monitoror/monitorable/gitlab/models"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetCommit provides a mock function with given fields: repository, sha
func (_m *Repository) GetCommit(repository string, sha string) (*models.Commit, error) {
	ret := _m.Called(repository, sha)

	var r0 *models.Commit
	if rf, ok := ret.Get(0).(func(string, string) *models.Commit); ok {
		r0 = rf(repository, sha)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Commit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(repository, sha)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCount provides a mock function with given fields: query
func (_m *Repository) GetCount(query string) (int, error) {
	ret := _m.Called(query)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMergeRequests provides a mock function with given fields: repository
func (_m *Repository) GetMergeRequests(repository string) ([]models.MergeRequest, error) {
	ret := _m.Called(repository)

	var r0 []models.MergeRequest
	if rf, ok := ret.Get(0).(func(string) []models.MergeRequest); ok {
		r0 = rf(repository)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.MergeRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(repository)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPipelines provides a mock function with given fields: repository, ref
func (_m *Repository) GetPipelines(repository string, ref string) (*models.Pipelines, error) {
	ret := _m.Called(repository, ref)

	var r0 *models.Pipelines
	if rf, ok := ret.Get(0).(func(string, string) *models.Pipelines); ok {
		r0 = rf(repository, ref)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Pipelines)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(repository, ref)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
